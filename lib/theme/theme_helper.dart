import 'dart:ui';
import 'package:english_academy_mobile/theme/theme_provider.dart';
import 'package:flutter/material.dart';
import 'package:english_academy_mobile/core/utils/size_utils.dart';
import 'package:provider/provider.dart';

String _appTheme = "primary";


/// Helper class for managing themes and colors.
class ThemeHelper {

  bool isDarkTheme() {
    return _appTheme == 'dark';
  }

  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors(),
    'dark': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme,
    'dark': ColorSchemes.darkColorScheme,
  };


  void toggleTheme(BuildContext context) {
    _appTheme = isDarkTheme() ? 'primary' : 'dark';
    changeTheme(context, _appTheme);
  }


  /// Changes the app theme to [_newTheme].
  void changeTheme(BuildContext context, String _newTheme) {
    _appTheme = _newTheme;
    ThemeProvider themeProvider = Provider.of<ThemeProvider>(context, listen: false);
    themeProvider.setTheme(themeData());
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }


  /// Returns the current theme data.
  ThemeData _getThemeData() {
    ColorScheme colorScheme;
    if (_appTheme == 'dark') {
      colorScheme = ColorSchemes.darkColorScheme;
    } else {
      colorScheme = _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    }

    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.green50,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5),
          ),
          shadowColor: appTheme.gray900.withOpacity(0.08),
          elevation: 2,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blueGray50,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.surface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.surface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: appTheme.gray900,
      fontSize: 16.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.gray900,
      fontSize: 14.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.gray60001,
      fontSize: 12.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w400,
    ),
    headlineMedium: TextStyle(
      color: appTheme.gray900,
      fontSize: 28.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w700,
    ),
    headlineSmall: TextStyle(
      color: appTheme.gray900,
      fontSize: 24.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w700,
    ),
    labelLarge: TextStyle(
      color: Color(0XFF6B7280),
      fontSize: 12.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w700,
    ),
    labelMedium: TextStyle(
      color: appTheme.gray60001,
      fontSize: 10.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w500,
    ),
    labelSmall: TextStyle(
      color: appTheme.greenA400,
      fontSize: 8.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w700,
    ),
    titleLarge: TextStyle(
      color: appTheme.gray900,
      fontSize: 20.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w700,
    ),
    titleMedium: TextStyle(
      color: appTheme.gray900,
      fontSize: 16.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w700,
    ),
    titleSmall: TextStyle(
      color: appTheme.gray900,
      fontSize: 14.fSize,
      fontFamily: 'SFProText',
      fontWeight: FontWeight.w700,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors

    primary: Color(0XFF1D2857), // mau nen giao dien
    primaryContainer: Color(0xFFFFFFFF), // mau cac container


    // Error colors
    errorContainer: Color(0XFF1D2857),
    onErrorContainer: Color(0X1EFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0xDD000000), // màu chữ
    onPrimaryContainer: Color(0X1EFFFFFF), //màu nền dưới chữ
  );
  static final darkColorScheme = ColorScheme.dark(
    // Primary colors
    primary: Color(0XFF1D2857),
    primaryContainer: Color(0xFF1b232d),

    // Error colors
    errorContainer: Color(0xFF1b232d),
    onErrorContainer: Color(0X1EFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0xFFFFFFFF),
    onPrimaryContainer: Color(0xFF131920),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);
  Color get amberA200 => Color(0XFFFDC83D);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue50 => Color(0XFFE6EFFE);
  Color get blueA200 => Color(0XFF3F75FF);
  Color get blueA400 => Color(0XFF1877F2);
  Color get blueA700 => Color(0XFF0564F1);

  // BlueGray
  Color get blueGray100 => Color(0XFFD1D5DB);
  Color get blueGray300 => Color(0XFF9CA3AF);
  Color get blueGray30001 => Color(0XFF94A3B8);
  Color get blueGray30002 => Color(0XFF97A9BD);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFEDEFF1);
  Color get blueGray500 => Color(0XFF5B6C8C);
  Color get blueGray50001 => Color(0XFF6772A0);
  Color get blueGray50002 => Color(0XFF64748B);
  Color get blueGray600 => Color(0XFF465287);
  Color get blueGray700 => Color(0XFF4B5563);
  Color get blueGray70059 => Color(0X59345D62);
  Color get blueGray800 => Color(0XFF374151);
  Color get blueGray80001 => Color(0XFF2B3558);
  Color get blueGray900 => Color(0XFF292D32);

  // BlueGrayB
  Color get blueGray800B2 => Color(0XB22C3658);

  // Gray
  Color get gray100 => Color(0XFFF3F4F6);
  Color get gray10001 => Color(0XFFF0F5FE);
  Color get gray10002 => Color(0XFFF2F5F7);
  Color get gray200 => Color(0XFFE5E7EB);
  Color get gray20001 => Color(0XFFF0F0F0);
  Color get gray20002 => Color(0XFFE8E9EC);
  Color get gray50 => Color(0XFFF8F4FF);
  Color get gray5001 => Color(0XFFFFF4F6);
  Color get gray5002 => Color(0XFFF9FAFB);
  Color get gray600 => Color(0XFF717585);
  Color get gray60001 => Color(0XFF6B7280);
  Color get gray900 => Color(0XFF111827);
  Color get gray90001 => Color(0XFF121933);
  Color get gray90002 => Color(0XFF121932);

  // Green
  Color get green50 => Color(0XFFEAFCF2);
  Color get green900 => Color(0XFF128807);
  Color get greenA400 => Color(0XFF24D076);

  // Indigo
  Color get indigo100 => Color(0XFFBBC2E1);
  Color get indigo10001 => Color(0XFFC8D0F6);
  Color get indigo900 => Color(0XFF27346A);
  Color get indigo90001 => Color(0XFF25326D);

  // LightBlue
  Color get lightBlue400 => Color(0XFF1ABCFE);
  Color get lightBlue800 => Color(0XFF016FD0);

  // Pink
  Color get pink50 => Color(0XFFFFDADF);

  // Red
  Color get red700 => Color(0XFFBD3D44);
  Color get red900 => Color(0XFFAA151B);
  Color get redA200 => Color(0XFFFF445D);

  // Yellow
  Color get yellow50 => Color(0XFFFFFAEC);

  Color get teal5001 => Color(0XFFD5E1F5);

  // Primary Container (Figma color: #8992BA)
  Color get primaryContainer => Color(0xFF8992BA);
}



PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
